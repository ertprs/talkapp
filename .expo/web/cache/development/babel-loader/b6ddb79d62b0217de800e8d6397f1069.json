{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\raphael\\\\react\\\\talkapp\\\\src\\\\ChatScreen\\\\index.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\n\nvar ChatScreen = function ChatScreen(props) {\n  var messages = [{\n    id: '1',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '2',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '3',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '4',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '5',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '6',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta um pouco maior para teste'\n  }, {\n    id: '7',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '8',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Mensagem curta'\n  }, {\n    id: '9',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '10',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }];\n  var scrollViewRef = useRef();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      style = _useState4[0],\n      setStyle = _useState4[1];\n\n  useEffect(function () {\n    setStyle('normal');\n  }, []);\n  return React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"SUPORTE\"), React.createElement(Image, {\n    source: require(\"../images/logo/Logo.png\"),\n    style: styles.headerLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })), React.createElement(ScrollView, {\n    style: styles.scrollView,\n    ref: scrollViewRef,\n    onContentSizeChange: function onContentSizeChange(contentWidth, contentHeight) {\n      scrollViewRef.current.scrollToEnd({\n        animated: false\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Ver mais...\"), messages.map(function (item) {\n    return React.createElement(View, {\n      key: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      style: [item.user == 'Suporte' ? styles.messageReceived : styles.messageSended],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: [item.user == 'Suporte' ? styles.messageReceivedDataView : styles.messageSendedDataView],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: [item.user == 'Suporte' ? styles.messageReceivedData : styles.messageSendedData],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, item.user + item.id), React.createElement(Text, {\n      style: [item.user == 'Suporte' ? styles.messageReceivedData : styles.messageSendedData],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, item.date)), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: [item.user == 'Suporte' ? styles.messageReceivedText : styles.messageSendedText],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, item.message))));\n  }), React.createElement(View, {\n    style: style == 'normal' ? {\n      height: 100\n    } : {\n      height: 135\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.messageInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: [styles.input, style == 'normal' ? {\n      height: 56\n    } : {\n      height: 80\n    }],\n    onFocus: function onFocus(style) {\n      return setStyle('bigger');\n    },\n    onBlur: function onBlur(style) {\n      return setStyle('normal');\n    },\n    textAlignVertical: \"center\",\n    multiline: true,\n    numberOfLines: 3,\n    placeholderTextColor: \"#68A0C9\",\n    placeholder: \"DIGITE SUA MENSAGEM\",\n    onChangeText: function onChangeText(message) {\n      return setMessage(message);\n    },\n    defaultValue: message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      if (message) {\n        setMessage('');\n        Keyboard.dismiss();\n        alert('Mensagem enviada');\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"send\",\n    size: 38,\n    color: \"#68A0C9\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }))), React.createElement(StatusBar, {\n    style: \"dark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatScreen;","map":{"version":3,"sources":["E:/raphael/react/talkapp/src/ChatScreen/index.js"],"names":["StatusBar","MaterialIcons","React","useState","useEffect","useRef","styles","ChatScreen","props","messages","id","user","date","message","scrollViewRef","setMessage","style","setStyle","Platform","OS","container","header","text","require","headerLogo","scrollView","contentWidth","contentHeight","current","scrollToEnd","animated","map","item","messageReceived","messageSended","messageReceivedDataView","messageSendedDataView","messageReceivedData","messageSendedData","messageReceivedText","messageSendedText","height","messageInput","input","button","Keyboard","dismiss","alert"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Image, \r\n  StyleSheet,\r\n  Text, \r\n  View,\r\n  ScrollView,\r\n  TextInput, \r\n  TouchableOpacity, \r\n  KeyboardAvoidingView,\r\n  Keyboard,\r\n  Platform,\r\n} from 'react-native';\r\n\r\nimport styles from './styles';\r\n\r\n\r\nconst ChatScreen = (props) => {\r\n\r\n  const messages = [\r\n    {\r\n      id: '1',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '2',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '3',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '4',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '5',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '6',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta um pouco maior para teste',\r\n    },\r\n    {\r\n      id: '7',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '8',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Mensagem curta',\r\n    },\r\n    {\r\n      id: '9',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '10',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n  ];\r\n\r\n  const scrollViewRef = useRef();\r\n\r\n  const [message, setMessage] = useState('');\r\n  const [style, setStyle] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setStyle('normal');\r\n    // alert(style);\r\n  }, []);\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\r\n      style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.text}>SUPORTE</Text>\r\n        <Image source={require('../images/logo/Logo.png')} style={styles.headerLogo} />\r\n      </View>\r\n      <ScrollView \r\n        style={styles.scrollView}\r\n        ref={scrollViewRef}\r\n        onContentSizeChange={(contentWidth, contentHeight)=> {scrollViewRef.current.scrollToEnd({animated: false})}\r\n      }>\r\n        <Text>Ver mais...</Text>\r\n        {\r\n          messages.map(item => {\r\n            return(\r\n              <View\r\n                key={item.id}>\r\n                <View style={[item.user == 'Suporte' ? styles.messageReceived : styles.messageSended]}>\r\n                  <View style={[item.user == 'Suporte' ? styles.messageReceivedDataView : styles.messageSendedDataView]}>\r\n                    <Text style={[item.user == 'Suporte' ? styles.messageReceivedData : styles.messageSendedData]}>{item.user+item.id}</Text>\r\n                    <Text style={[item.user == 'Suporte' ? styles.messageReceivedData : styles.messageSendedData]}>{item.date}</Text>\r\n                  </View>\r\n                  <View>\r\n                    <Text style={[item.user == 'Suporte' ? styles.messageReceivedText : styles.messageSendedText]}>\r\n                      {item.message}\r\n                    </Text>\r\n                  </View>\r\n                </View>\r\n              </View>\r\n            )})\r\n          }\r\n          <View style={style == 'normal' ? { height: 100 } : { height: 135 }}/>\r\n        </ScrollView>\r\n        <View style={styles.messageInput}>\r\n          <TextInput\r\n            style={[styles.input, style == 'normal' ? { height: 56 } : { height: 80 }]}\r\n            onFocus={style => setStyle('bigger')}\r\n            onBlur={style => setStyle('normal')}\r\n            textAlignVertical=\"center\"\r\n            multiline={true}\r\n            numberOfLines={3}\r\n            placeholderTextColor=\"#68A0C9\"\r\n            placeholder=\"DIGITE SUA MENSAGEM\"\r\n            onChangeText={message => setMessage(message)}\r\n            defaultValue={message}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={ () => {\r\n              if(message) {\r\n                setMessage('');\r\n                Keyboard.dismiss();\r\n                alert('Mensagem enviada');\r\n              }\r\n            }}>\r\n            <MaterialIcons name=\"send\" size={38} color=\"#68A0C9\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n      <StatusBar style=\"dark\"/>\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}