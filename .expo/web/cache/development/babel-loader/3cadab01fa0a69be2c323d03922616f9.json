{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\raphael\\\\react\\\\talkapp\\\\src\\\\ChatScreen\\\\index.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport styles from \"./styles\";\n\nvar ChatScreen = function ChatScreen() {\n  var messages = [{\n    id: '1',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '2',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '3',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '4',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '5',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '6',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '7',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '8',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }, {\n    id: '9',\n    user: 'Cliente',\n    date: '22h33m',\n    message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...'\n  }, {\n    id: '10',\n    user: 'Suporte',\n    date: '22h33m',\n    message: 'Texto da mensagem de resposta'\n  }];\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"a\"), React.createElement(Image, {\n    source: require(\"../images/logo/Logo.png\"),\n    style: styles.headerLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.chatView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, messages.map(function (item) {\n    return React.createElement(View, {\n      key: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.messageSended,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }\n    }, React.createElement(View, {\n      style: styles.messageSendedDataView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.messageSendedData,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }, item.user), React.createElement(Text, {\n      style: styles.messageSendedData,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }, item.date)), React.createElement(View, {\n      style: styles.messageSendedTextView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.messageSendedText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }\n    }, item.message))));\n  })), React.createElement(View, {\n    style: styles.messageInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholderTextColor: \"#68A0C9\",\n    placeholder: \"DIGITE SUA MENSAGEM\",\n    onChangeText: function onChangeText(message) {\n      return setMessage(message);\n    },\n    defaultValue: message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"send\",\n    size: 24,\n    color: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })))), React.createElement(StatusBar, {\n    style: \"dark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatScreen;","map":{"version":3,"sources":["E:/raphael/react/talkapp/src/ChatScreen/index.js"],"names":["StatusBar","MaterialIcons","React","useState","styles","ChatScreen","messages","id","user","date","message","setMessage","container","header","text","require","headerLogo","chatView","map","item","messageSended","messageSendedDataView","messageSendedData","messageSendedTextView","messageSendedText","messageInput","input","button"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport React, { useState } from 'react';\r\nimport { Image, StyleSheet, Text, View, ScrollView, TextInput, TouchableOpacity, FlatList } from 'react-native';\r\n\r\nimport styles from './styles';\r\n\r\n\r\nconst ChatScreen = () => {\r\n\r\n  const messages = [\r\n    {\r\n      id: '1',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '2',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '3',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '4',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '5',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '6',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '7',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '8',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n    {\r\n      id: '9',\r\n      user: 'Cliente',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem do cliente para o suporte, relacionado à ajuda ou outras requisições, mensagem de exemplo, teste etc...',\r\n    },\r\n    {\r\n      id: '10',\r\n      user: 'Suporte',\r\n      date: '22h33m',\r\n      message: 'Texto da mensagem de resposta',\r\n    },\r\n  ];\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.text}>a</Text>\r\n        <Image source={require('../images/logo/Logo.png')} style={styles.headerLogo} />\r\n      </View>\r\n      <View style={styles.chatView}>\r\n        <ScrollView>\r\n          {\r\n            messages.map(item => {\r\n              return(\r\n                <View\r\n                  key={item.id}>\r\n                  <View style={styles.messageSended}>\r\n                    <View style={styles.messageSendedDataView}>\r\n                      <Text style={styles.messageSendedData}>{item.user}</Text>\r\n                      <Text style={styles.messageSendedData}>{item.date}</Text>\r\n                    </View>\r\n                    <View style={styles.messageSendedTextView}>\r\n                      <Text style={styles.messageSendedText}>\r\n                        {item.message}\r\n                      </Text>\r\n                    </View>\r\n                  </View>\r\n                </View>\r\n              )})\r\n            }\r\n          </ScrollView>\r\n        <View style={styles.messageInput}>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholderTextColor=\"#68A0C9\"\r\n            placeholder=\"DIGITE SUA MENSAGEM\"\r\n            onChangeText={message => setMessage(message)}\r\n            defaultValue={message}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={ () => {} }>\r\n            <MaterialIcons name=\"send\" size={24} color=\"black\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n      <StatusBar style=\"dark\"/>\r\n    </View>\r\n  );\r\n}\r\nexport default ChatScreen;\r\n\r\n"]},"metadata":{},"sourceType":"module"}